// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TD.CongDan.Infrastructure.DbContexts;

namespace TD.CongDan.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210526114430_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommuneId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IdentityDateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdentityTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("GenderId");

                    b.HasIndex("IdentityTypeId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("ReligionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameWithType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathWithType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.AreaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("AreaTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "tinh",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Tỉnh"
                        },
                        new
                        {
                            Id = 2,
                            Code = "thanh-pho",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Thành phố"
                        },
                        new
                        {
                            Id = 3,
                            Code = "quan",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Quận"
                        },
                        new
                        {
                            Id = 4,
                            Code = "huyen",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Huyện"
                        },
                        new
                        {
                            Id = 5,
                            Code = "thi-xa",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Thị xã"
                        },
                        new
                        {
                            Id = 6,
                            Code = "thi-tran",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Thị trấn"
                        },
                        new
                        {
                            Id = 7,
                            Code = "phuong",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Phường"
                        },
                        new
                        {
                            Id = 8,
                            Code = "xa",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Xã"
                        },
                        new
                        {
                            Id = 9,
                            Code = "thanh-pho-trung-uong",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Thành phố trung ương"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "giao-thong",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Giao thông"
                        },
                        new
                        {
                            Id = 2,
                            Code = "y-te",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Y tế"
                        },
                        new
                        {
                            Id = 3,
                            Code = "giao-duc",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Giáo dục"
                        },
                        new
                        {
                            Id = 4,
                            Code = "moi-truong",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Môi trường"
                        },
                        new
                        {
                            Id = 5,
                            Code = "nong-nghiep",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Nông nghiệp"
                        },
                        new
                        {
                            Id = 6,
                            Code = "du-lich",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Du lịch"
                        },
                        new
                        {
                            Id = 7,
                            Code = "kinh-te",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Kinh tế"
                        },
                        new
                        {
                            Id = 8,
                            Code = "hanh-chinh",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Hành chính"
                        },
                        new
                        {
                            Id = 9,
                            Code = "khac",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Benefits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "money-bill-wave",
                            Name = "Thưởng"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "award",
                            Name = "Giải thưởng"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "plane",
                            Name = "Du lịch"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "piggy-bank",
                            Name = "Phiếu giảm giá"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "user-nurse",
                            Name = "Khám sức khỏe"
                        },
                        new
                        {
                            Id = 6,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "book-reader",
                            Name = "Thư viện"
                        },
                        new
                        {
                            Id = 7,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "swimmer",
                            Name = "Hoạt động nhóm"
                        },
                        new
                        {
                            Id = 8,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "baby-carriage",
                            Name = "Trông trẻ"
                        },
                        new
                        {
                            Id = 9,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "umbrella-beach",
                            Name = "Nghỉ phép"
                        },
                        new
                        {
                            Id = 10,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "laptop",
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = 11,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "taxi",
                            Name = "Trợ cấp đi lại"
                        },
                        new
                        {
                            Id = 12,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "chalkboard-teacher",
                            Name = "Đào tạo"
                        },
                        new
                        {
                            Id = 13,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "mobile",
                            Name = "Điện thoại"
                        },
                        new
                        {
                            Id = 14,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "hamburger",
                            Name = "Căn-tin"
                        },
                        new
                        {
                            Id = 15,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "ellipsis-h",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessSector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanySize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternationalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("ProfileVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.CompanyIndustry", b =>
                {
                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CompanyId", "IndustryId");

                    b.HasIndex("IndustryId");

                    b.ToTable("CompanyIndustries");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Degrees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Trung học phổ thông"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Trung cấp"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Cao đẳng/Đại học"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Thạch sĩ"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Tiến sĩ"
                        },
                        new
                        {
                            Id = 6,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Chưa có kinh nghiệm"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Dưới 1 năm"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "1 năm"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "2 năm"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "3 năm"
                        },
                        new
                        {
                            Id = 6,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "4 năm"
                        },
                        new
                        {
                            Id = 7,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "5 năm"
                        },
                        new
                        {
                            Id = 8,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Trên 5 năm"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Agency (Design/Development)"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Agency (Marketing/Advertising)"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bán lẻ - Hàng tiêu dùng - FMCG"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bảo hiểm"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bảo trì / Sửa chữa"
                        },
                        new
                        {
                            Id = 6,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bất động sản"
                        },
                        new
                        {
                            Id = 7,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Chứng khoán"
                        },
                        new
                        {
                            Id = 8,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Cơ khí"
                        },
                        new
                        {
                            Id = 9,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Cơ quan nhà nước"
                        },
                        new
                        {
                            Id = 10,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Du lịch"
                        },
                        new
                        {
                            Id = 11,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Dược phẩm / Y tế / Công nghệ sinh học"
                        },
                        new
                        {
                            Id = 12,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Điện tử / Điện lạnh"
                        },
                        new
                        {
                            Id = 13,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Giải trí"
                        },
                        new
                        {
                            Id = 14,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Giáo dục / Đào tạo"
                        },
                        new
                        {
                            Id = 15,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "In ấn / Xuất bản"
                        },
                        new
                        {
                            Id = 16,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Internet / Online"
                        },
                        new
                        {
                            Id = 17,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "IT - Phần cứng"
                        },
                        new
                        {
                            Id = 18,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "IT - Phần mềm"
                        },
                        new
                        {
                            Id = 19,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Kế toán / Kiểm toán"
                        },
                        new
                        {
                            Id = 20,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Khác"
                        },
                        new
                        {
                            Id = 21,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Logistics - Vận tải"
                        },
                        new
                        {
                            Id = 22,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Luật"
                        },
                        new
                        {
                            Id = 23,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Marketing / Truyền thông / Quảng cáo"
                        },
                        new
                        {
                            Id = 24,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Môi trường"
                        },
                        new
                        {
                            Id = 25,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Năng lượng"
                        },
                        new
                        {
                            Id = 26,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Ngân hàng"
                        },
                        new
                        {
                            Id = 27,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Nhà hàng / Khách sạn"
                        },
                        new
                        {
                            Id = 28,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Nhân sự"
                        },
                        new
                        {
                            Id = 29,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Nông Lâm Ngư nghiệp"
                        },
                        new
                        {
                            Id = 30,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Sản xuất"
                        },
                        new
                        {
                            Id = 31,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Tài chính"
                        },
                        new
                        {
                            Id = 32,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Thiết kế / kiến trúc"
                        },
                        new
                        {
                            Id = 33,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Thời trang"
                        },
                        new
                        {
                            Id = 34,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Thương mại điện tử"
                        },
                        new
                        {
                            Id = 35,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Tổ chức phi lợi nhuận"
                        },
                        new
                        {
                            Id = 36,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Tự động hóa"
                        },
                        new
                        {
                            Id = 37,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Tư vấn"
                        },
                        new
                        {
                            Id = 38,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Viễn thông"
                        },
                        new
                        {
                            Id = 39,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Xây dựng"
                        },
                        new
                        {
                            Id = 40,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Xuất nhập khẩu"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobAge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("JobAges");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adrress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentPositionId")
                        .HasColumnType("int");

                    b.Property<int?>("DegreeId")
                        .HasColumnType("int");

                    b.Property<int?>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("IsSearchAllowed")
                        .HasColumnType("int");

                    b.Property<int?>("JobNameId")
                        .HasColumnType("int");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MinExpectedSalary")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPositionId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("JobNameId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("PositionId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobApplied", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RecruitmentId")
                        .HasColumnType("int");

                    b.Property<string>("CVFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserName", "RecruitmentId");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("JobApplieds");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("JobNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "An toàn lao động"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bán hàng kỹ thuật"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bán lẻ/Bán sỉ"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Báo chí/Truyền hình"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bảo hiểm"
                        },
                        new
                        {
                            Id = 6,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bảo trì/Sửa chữa"
                        },
                        new
                        {
                            Id = 7,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bất động sản"
                        },
                        new
                        {
                            Id = 8,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Biên/Phiên dịch"
                        },
                        new
                        {
                            Id = 9,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bưu chính viễn thông"
                        },
                        new
                        {
                            Id = 10,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Chứng khoán/Vàng/Ngoại tệ"
                        },
                        new
                        {
                            Id = 11,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Cơ khí/Chế tạo/Tự động hóa"
                        },
                        new
                        {
                            Id = 12,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Công nghệ cao"
                        },
                        new
                        {
                            Id = 13,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Công nghệ ô tô"
                        },
                        new
                        {
                            Id = 14,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Công nghệ thông tin"
                        },
                        new
                        {
                            Id = 15,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Dầu khí, khóa chất"
                        },
                        new
                        {
                            Id = 16,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Dịch vụ khách hàng"
                        },
                        new
                        {
                            Id = 17,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Điện/Điện tử/Điện lạnh"
                        },
                        new
                        {
                            Id = 18,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Du lịch"
                        },
                        new
                        {
                            Id = 19,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Giáo dục/Đào tạo"
                        },
                        new
                        {
                            Id = 20,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Tư vấn"
                        },
                        new
                        {
                            Id = 21,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Vận tải/Kho vận"
                        },
                        new
                        {
                            Id = 22,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Y tế/Dược"
                        },
                        new
                        {
                            Id = 23,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("JobPositions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Mới tốt nghiệp"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Nhân viên"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Trưởng phòng"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Giám đốc và cấp cao hơn"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobSaved", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RecruitmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserName", "RecruitmentId");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("JobSaveds");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Toàn thời gian"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Bán thời gian"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Thực tập"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Nghề tự do"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Hợp đồng thời vụ"
                        },
                        new
                        {
                            Id = 6,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Recruitment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContactAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DegreeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobAgeId")
                        .HasColumnType("int");

                    b.Property<int?>("JobNameId")
                        .HasColumnType("int");

                    b.Property<int?>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfJob")
                        .HasColumnType("int");

                    b.Property<string>("OtherRequirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResumeApplyExpired")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResumeRequirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalaryId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DegreeId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("GenderId");

                    b.HasIndex("JobAgeId");

                    b.HasIndex("JobNameId");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("SalaryId");

                    b.ToTable("Recruitments");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.RecruitmentBenefit", b =>
                {
                    b.Property<int>("BenefitId")
                        .HasColumnType("int");

                    b.Property<int>("RecruitmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BenefitId", "RecruitmentId");

                    b.HasIndex("RecruitmentId");

                    b.ToTable("RecruitmentBenefits");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Salaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Dưới 3 triệu"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "3 - 5 triệu"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "5 -7 triệu"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "7 - 10 triệu"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "10 - 12 triệu"
                        },
                        new
                        {
                            Id = 6,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "12 - 15 triệu"
                        },
                        new
                        {
                            Id = 7,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "15 - 20 triệu"
                        },
                        new
                        {
                            Id = 8,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "20 - 25 triệu"
                        },
                        new
                        {
                            Id = 9,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "25 - 30 triệu"
                        },
                        new
                        {
                            Id = 10,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Trên 30 triệu"
                        },
                        new
                        {
                            Id = 11,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Thỏa thuận"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontendInput")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsFilterable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSearchable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSellerEditable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsVisibleOnFront")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeDatetime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Value")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("AttributeDatetimes");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeDecimal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("AttributeDecimals");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeInt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("AttributeInts");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId1");

                    b.ToTable("AttributeTexts");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeVarchar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("AttributeVarchars");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.EcommerceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncludeInMenu")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EcommerceCategories");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.EcommerceCategoryAttribute", b =>
                {
                    b.Property<int?>("EcommerceCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("EcommerceCategoryId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("EcommerceCategoryAttributes");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.EcommerceCategoryProduct", b =>
                {
                    b.Property<int?>("EcommerceCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("EcommerceCategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("EcommerceCategoryProducts");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PrimaryEcommerceCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PrimaryEcommerceCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Nam"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Nữ"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.IdentityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("IdentityTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Chứng minh nhân dân"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Căn cước công dân"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Hộ chiếu"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Độc thân"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Kết hôn"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Ly hôn"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Other.AppConfig", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigs");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Other.Bookmark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOwned")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Navigate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeStart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("TopicTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Bookmarks");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommuneId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ContentHtml")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExtraInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("Decimal(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("Decimal(9,6)");

                    b.Property<string>("PhoneContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommuneId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PlaceTypeId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.PlaceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("PlaceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Code = "benh-vien",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "hospital",
                            Name = "Bệnh viện"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Code = "benh-vien",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "capsules",
                            Name = "Hiệu thuốc"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Code = "phong-kham",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "stethoscope",
                            Name = "Phòng khám"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Code = "tram-y-te",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "briefcase-medical",
                            Name = "Trạm y tế"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Code = "tram-xang",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "gas-pump",
                            Name = "Trạm xăng"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Code = "diem-do-xe",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "parking",
                            Name = "Điểm đỗ xe"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Code = "gara-o-to",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "tools",
                            Name = "Gara ô tô"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Code = "tram-thu-phi",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "money-bill",
                            Name = "Trạm thu phí"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Code = "diem-den-giao-thong",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "money-bill",
                            Name = "Điểm đen giao thông"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 6,
                            Code = "nha-hang",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "concierge-bell",
                            Name = "Nhà hàng"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            Code = "khach-san",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "hotel",
                            Name = "Khách sạn"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            Code = "diem-mua-sam",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "shopping-cart",
                            Name = "Điểm mua sắm"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 6,
                            Code = "dia-diem-noi-tieng",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "map-marked",
                            Name = "Địa điểm nổi tiếng"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 6,
                            Code = "di-tich-lich-su",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "monument",
                            Name = "Di tích lịch sử"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 6,
                            Code = "su-kien-dip-tet",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "calendar-day",
                            Name = "Sự kiện dịp Tết"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 6,
                            Code = "le-hoi",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "mask",
                            Name = "Lễ hội"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 6,
                            Code = "danh-lam-thang-canh",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "gratipay",
                            Name = "Danh lam thắng cảnh"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 6,
                            Code = "den",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "gopuram",
                            Name = "Đền"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 6,
                            Code = "chua",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "gopuram",
                            Name = "Chùa"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 6,
                            Code = "nha-tho",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "church",
                            Name = "Nhà thờ"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 6,
                            Code = "diem-o-nhiem",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "biohazard",
                            Name = "Điểm ô nhiễm"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 6,
                            Code = "diem-xu-ly-rac",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "recycle",
                            Name = "Điểm xử lý rác"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 7,
                            Code = "cong-ty",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "building",
                            Name = "Công ty"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 9,
                            Code = "khac",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Icon = "map-marker",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Religions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Không"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Phật giáo"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Công giáo"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Tin lành"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            Name = "Khác"
                        });
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Traffic.Carpool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceArrivalId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceDepartureId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatCount")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceArrivalId");

                    b.HasIndex("PlaceDepartureId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Carpools");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Traffic.LicensePlate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicensePlateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LicensePlates");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Traffic.TrafficTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Behaviour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfOffence")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LicensePlateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrafficTickets");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Traffic.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SeatCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("TD.CongDan.Infrastructure.Models.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TD.CongDan.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Area", "Commune")
                        .WithMany("UserInfoCommunes")
                        .HasForeignKey("CommuneId");

                    b.HasOne("TD.CongDan.Domain.Entities.Area", "District")
                        .WithMany("UserInfoDistricts")
                        .HasForeignKey("DistrictId");

                    b.HasOne("TD.CongDan.Domain.Entities.Gender", "Gender")
                        .WithMany("UserInfos")
                        .HasForeignKey("GenderId");

                    b.HasOne("TD.CongDan.Domain.Entities.IdentityType", "IdentityType")
                        .WithMany("UserInfos")
                        .HasForeignKey("IdentityTypeId");

                    b.HasOne("TD.CongDan.Domain.Entities.MaritalStatus", "MaritalStatus")
                        .WithMany("UserInfos")
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("TD.CongDan.Domain.Entities.Area", "Province")
                        .WithMany("UserInfoProvinces")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("TD.CongDan.Domain.Entities.Religion", "Religion")
                        .WithMany("UserInfos")
                        .HasForeignKey("ReligionId");

                    b.Navigation("Commune");

                    b.Navigation("District");

                    b.Navigation("Gender");

                    b.Navigation("IdentityType");

                    b.Navigation("MaritalStatus");

                    b.Navigation("Province");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Company", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Place", "Place")
                        .WithMany("Companies")
                        .HasForeignKey("PlaceId");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.CompanyIndustry", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Company.Company", "Company")
                        .WithMany("CompanyIndustries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TD.CongDan.Domain.Entities.Company.Industry", "Industry")
                        .WithMany("CompanyIndustries")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobApplication", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Company.JobPosition", "CurrentPosition")
                        .WithMany("CurrentJobApplications")
                        .HasForeignKey("CurrentPositionId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.Degree", "Degree")
                        .WithMany("JobApplications")
                        .HasForeignKey("DegreeId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.Experience", "Experience")
                        .WithMany("JobApplications")
                        .HasForeignKey("ExperienceId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.JobName", "JobName")
                        .WithMany()
                        .HasForeignKey("JobNameId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.JobType", "JobType")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.JobPosition", "Position")
                        .WithMany("JobApplications")
                        .HasForeignKey("PositionId");

                    b.Navigation("CurrentPosition");

                    b.Navigation("Degree");

                    b.Navigation("Experience");

                    b.Navigation("JobName");

                    b.Navigation("JobType");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobApplied", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Company.Recruitment", "Recruitment")
                        .WithMany("JobApplieds")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recruitment");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobSaved", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Company.Recruitment", "Recruitment")
                        .WithMany("JobSaveds")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recruitment");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Recruitment", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Company.Company", "Company")
                        .WithMany("Recruitments")
                        .HasForeignKey("CompanyId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.Degree", "Degree")
                        .WithMany("Recruitments")
                        .HasForeignKey("DegreeId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.Experience", "Experience")
                        .WithMany("Recruitments")
                        .HasForeignKey("ExperienceId");

                    b.HasOne("TD.CongDan.Domain.Entities.Gender", "Gender")
                        .WithMany("Recruitments")
                        .HasForeignKey("GenderId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.JobAge", "JobAge")
                        .WithMany("Recruitments")
                        .HasForeignKey("JobAgeId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.JobName", "JobName")
                        .WithMany("Recruitments")
                        .HasForeignKey("JobNameId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.JobPosition", "JobPosition")
                        .WithMany("Recruitments")
                        .HasForeignKey("JobPositionId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.JobType", "JobType")
                        .WithMany("Recruitments")
                        .HasForeignKey("JobTypeId");

                    b.HasOne("TD.CongDan.Domain.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.Salary", "Salary")
                        .WithMany("Recruitments")
                        .HasForeignKey("SalaryId");

                    b.Navigation("Company");

                    b.Navigation("Degree");

                    b.Navigation("Experience");

                    b.Navigation("Gender");

                    b.Navigation("JobAge");

                    b.Navigation("JobName");

                    b.Navigation("JobPosition");

                    b.Navigation("JobType");

                    b.Navigation("Place");

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.RecruitmentBenefit", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Company.Benefit", "Benefit")
                        .WithMany("RecruitmentBenefit")
                        .HasForeignKey("BenefitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TD.CongDan.Domain.Entities.Company.Recruitment", "Recruitment")
                        .WithMany("RecruitmentBenefit")
                        .HasForeignKey("RecruitmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Benefit");

                    b.Navigation("Recruitment");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeDatetime", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Attribute", "Attribute")
                        .WithMany("AttributeDatetimes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Product", "Product")
                        .WithMany("AttributeDatetimes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeDecimal", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Attribute", "Attribute")
                        .WithMany("AttributeDecimals")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Product", "Product")
                        .WithMany("AttributeDecimals")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeInt", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Attribute", "Attribute")
                        .WithMany("AttributeInts")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Product", "Product")
                        .WithMany("AttributeInts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeText", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Attribute", "Attribute")
                        .WithMany("AttributeTexts")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Product", null)
                        .WithMany("AttributeTexts")
                        .HasForeignKey("ProductId1");

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeValue", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Attribute", "Attribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.AttributeVarchar", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Attribute", "Attribute")
                        .WithMany("AttributeVarchars")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Product", "Product")
                        .WithMany("AttributeVarchars")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.EcommerceCategoryAttribute", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Attribute", "Attribute")
                        .WithMany("EcommerceCategoryAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.EcommerceCategory", "EcommerceCategory")
                        .WithMany("EcommerceCategoryAttributes")
                        .HasForeignKey("EcommerceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("EcommerceCategory");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.EcommerceCategoryProduct", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.EcommerceCategory", "EcommerceCategory")
                        .WithMany("EcommerceCategoryProducts")
                        .HasForeignKey("EcommerceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Product", "Product")
                        .WithMany("EcommerceCategoryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcommerceCategory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.Product", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("TD.CongDan.Domain.Entities.Company.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("TD.CongDan.Domain.Entities.Ecommerce.EcommerceCategory", "PrimaryEcommerceCategory")
                        .WithMany("PrimaryProducts")
                        .HasForeignKey("PrimaryEcommerceCategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Company");

                    b.Navigation("PrimaryEcommerceCategory");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Other.Bookmark", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Category", "Category")
                        .WithMany("Bookmarks")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Place", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Area", "Commune")
                        .WithMany("PlaceCommunes")
                        .HasForeignKey("CommuneId");

                    b.HasOne("TD.CongDan.Domain.Entities.Area", "District")
                        .WithMany("PlaceDistricts")
                        .HasForeignKey("DistrictId");

                    b.HasOne("TD.CongDan.Domain.Entities.PlaceType", "PlaceType")
                        .WithMany("Places")
                        .HasForeignKey("PlaceTypeId");

                    b.HasOne("TD.CongDan.Domain.Entities.Area", "Province")
                        .WithMany("PlaceProvinces")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Commune");

                    b.Navigation("District");

                    b.Navigation("PlaceType");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.PlaceType", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Category", "Category")
                        .WithMany("PlaceTypes")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Traffic.Carpool", b =>
                {
                    b.HasOne("TD.CongDan.Domain.Entities.Place", "PlaceArrival")
                        .WithMany("CarpoolArrivals")
                        .HasForeignKey("PlaceArrivalId");

                    b.HasOne("TD.CongDan.Domain.Entities.Place", "PlaceDeparture")
                        .WithMany("CarpoolDepartures")
                        .HasForeignKey("PlaceDepartureId");

                    b.HasOne("TD.CongDan.Domain.Entities.Traffic.VehicleType", "VehicleType")
                        .WithMany("Carpools")
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("PlaceArrival");

                    b.Navigation("PlaceDeparture");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Area", b =>
                {
                    b.Navigation("PlaceCommunes");

                    b.Navigation("PlaceDistricts");

                    b.Navigation("PlaceProvinces");

                    b.Navigation("UserInfoCommunes");

                    b.Navigation("UserInfoDistricts");

                    b.Navigation("UserInfoProvinces");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Category", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("PlaceTypes");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Benefit", b =>
                {
                    b.Navigation("RecruitmentBenefit");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Company", b =>
                {
                    b.Navigation("CompanyIndustries");

                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Degree", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Experience", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Industry", b =>
                {
                    b.Navigation("CompanyIndustries");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobAge", b =>
                {
                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobName", b =>
                {
                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobPosition", b =>
                {
                    b.Navigation("CurrentJobApplications");

                    b.Navigation("JobApplications");

                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.JobType", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Recruitment", b =>
                {
                    b.Navigation("JobApplieds");

                    b.Navigation("JobSaveds");

                    b.Navigation("RecruitmentBenefit");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Company.Salary", b =>
                {
                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.Attribute", b =>
                {
                    b.Navigation("AttributeDatetimes");

                    b.Navigation("AttributeDecimals");

                    b.Navigation("AttributeInts");

                    b.Navigation("AttributeTexts");

                    b.Navigation("AttributeValues");

                    b.Navigation("AttributeVarchars");

                    b.Navigation("EcommerceCategoryAttributes");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.EcommerceCategory", b =>
                {
                    b.Navigation("EcommerceCategoryAttributes");

                    b.Navigation("EcommerceCategoryProducts");

                    b.Navigation("PrimaryProducts");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Ecommerce.Product", b =>
                {
                    b.Navigation("AttributeDatetimes");

                    b.Navigation("AttributeDecimals");

                    b.Navigation("AttributeInts");

                    b.Navigation("AttributeTexts");

                    b.Navigation("AttributeVarchars");

                    b.Navigation("EcommerceCategoryProducts");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Recruitments");

                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.IdentityType", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.MaritalStatus", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Place", b =>
                {
                    b.Navigation("CarpoolArrivals");

                    b.Navigation("CarpoolDepartures");

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.PlaceType", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Religion", b =>
                {
                    b.Navigation("UserInfos");
                });

            modelBuilder.Entity("TD.CongDan.Domain.Entities.Traffic.VehicleType", b =>
                {
                    b.Navigation("Carpools");
                });
#pragma warning restore 612, 618
        }
    }
}
